version: '3.3'
services:
    # Web service
    web:
        # Get DockerFile for build
        build: ./app
        # Command run on start
        command: gunicorn app:app -w 3 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:5000
        # Ports expose
        ports:
            - "5000:5000"
        # Create volume
        volumes:
            - ./app:/app
        # Link with redis
        depends_on:
            - redis-container
        # Create networks for communication
        networks:
            - front
            - db     
            - nginx           
        # Check health container
        healthcheck:
          test: ["CMD", "curl -f http://localhost:5000 || exit 1"]
          timeout: 30s
          interval: 1m
          retries: 3
        image: pakopac/video_games_app
      
    # DB service
    db:
        # Get DockerFile for build
        build: ./db
        # Command run on start
        command: --init-file /docker-entrypoint-initdb.d/games.sql
        # Ports expose
        ports:
          - "3306:3306"
        # Create volume
        volumes:
            - ./db/sql/games.sql:/docker-entrypoint-initdb.d/games.sql
        # Create env variable for db connexion
        environment:
            MYSQL_ROOT_USER: root
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: video_games
            MYSQL_USER: ${SQL_USER}
            MYSQL_PASSWORD: ${SQL_PASSWORD}
        # Link with redis
        depends_on:
            - redis-container
        # Create networks for communication
        networks:
            - front
            - db
        # Restart on changes
        restart: unless-stopped
        # Check health container
        healthcheck:
          test: ["CMD", "curl -f http://localhost:3306 || exit 1"]
          timeout: 30s
          interval: 1m
          retries: 3
        image: pakopac/video_games_db

    nginx: 
      image: nginx:alpine
      container_name: nginx
      depends_on: 
        - app
      ports:
        - "80:80"
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf
      networks:
        - nginx
      restart: always
    # redis container for db
    redis-container:
        image: redis
        networks: 
            - db

# Create networks for communication
networks: 
    front:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.16.238.0/24
    db:
    nginx:
        driver: bridge